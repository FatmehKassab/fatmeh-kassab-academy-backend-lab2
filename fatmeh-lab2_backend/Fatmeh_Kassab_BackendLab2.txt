Fatmeh Kassab     BackendLab Session2

1. CREATE DATABASE LibraryDB;

2. a) CREATE TABLE Books (
    book_id INT PRIMARY KEY ,
    title VARCHAR(255) NOT NULL,
    author_id INT,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    published_year INT,
    FOREIGN KEY(author_id) REFERENCES Authors(author_id)
);

   b) CREATE TABLE Authors (
    author_id INT PRIMARY KEY ,
    name VARCHAR(100) NOT NULL,
    birth_date DATE,
    country VARCHAR(50)
);

   c) CREATE TABLE Borrowers (
    borrower_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE,
    phone VARCHAR(20)
);

   d) CREATE TABLE Loans (
    loan_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    borrower_id INT,
    loan_date DATE NOT NULL,
    return_date DATE,
    returned BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (borrower_id) Borrowers(borrower_id)
);


3. Data population

INSERT INTO Authors (author_id,name, birth_date, country) VALUES 
(1,'Carine Rizkallah', DATE '1980-07-31', 'Lebanon')

INSERT INTO Authors (author_id,name, birth_date, country) VALUES 
(2,'Nadine', DATE '1980-07-10', 'Lebanon')

INSERT INTO Books (book_id,title, author_id, isbn, published_year) VALUES
(1,'albi da2',1, '97803', 2015)

INSERT INTO Books (book_id,title, author_id, isbn, published_year) VALUES
(2,'mesh ana',1, '9663', 2015)

INSERT INTO Books (book_id,title, author_id, isbn, published_year) VALUES
(3,'ghannoujit baya',1, '9663', 2000) // I CHANGED THE ISBN IN THE CONSOLE BECAUSE ITS DUPLICATED

INSERT INTO Borrowers (borrower_id,name, email, phone) VALUES
    (2,'Nari Kassab', 'nari@gmail.com', '55590101')
    
INSERT INTO Loans (loan_id,book_id, borrower_id, loan_date, return_date, returned) VALUES
(1, 1,1,  DATE '2025-01-15',  DATE '2025-02-15', TRUE),
(2, 2,1,  DATE '2025-01-15', DATE '2025-02-15', FALSE)
4. Queries

SELECT * FROM Books WHERE published_year = 2015;

SELECT l.loan_id, b.title, br.name AS borrower_name, 
       l.loan_date, l.return_date
FROM Loans l
JOIN Books b ON l.book_id = b.book_id
JOIN Borrowers br ON l.borrower_id = br.borrower_id
WHERE l.returned = FALSE AND l.return_date < '2025-09-15';

SELECT b.title, a.name AS author, l.loan_date, l.return_date
FROM Loans l
JOIN Books b ON l.book_id = b.book_id
JOIN Authors a ON b.author_id = a.author_id
JOIN Borrowers br ON l.borrower_id = br.borrower_id
WHERE br.name = 'Fatmeh Kassab';

SELECT COUNT(*) AS total_books 
FROM Books;

5.Views

CREATE VIEW PopularBooks AS
SELECT 
    b.book_id,
    b.title,
    a.name AS author,
    COUNT(l.loan_id) AS loan_count
FROM 
    Books b
JOIN 
    Authors a ON b.author_id = a.author_id
LEFT JOIN 
    Loans l ON b.book_id = l.book_id
GROUP BY 
    b.book_id, b.title, a.name
ORDER BY 
    loan_count DESC;
    
6.Procedure

return a book 
CREATE OR REPLACE PROCEDURE return_book(
                  p_loan_id INT,
                  p_return_date DATE
              )
                  LANGUAGE plpgsql
              AS $$
              DECLARE
                  loan_exists BOOLEAN;
                  already_returned BOOLEAN;
              BEGIN
                  SELECT EXISTS (SELECT 1 FROM loans WHERE loan_id = p_loan_id) INTO loan_exists;
              
                  SELECT returned FROM loans WHERE loan_id = p_loan_id INTO already_returned;
              
                  IF NOT loan_exists THEN
                      RAISE EXCEPTION 'Loan record not found';
                  ELSIF already_returned THEN
                      RAISE EXCEPTION 'This book was already returned';
                  ELSE
                      UPDATE loans
                      SET returned = TRUE,
                          return_date = p_return_date
                      WHERE loan_id = p_loan_id;
              
                      RAISE NOTICE 'Book successfully returned. Thank you!';
                  END IF;
              END;
              $$;
              
  execute: CALL return_book(2, CURRENT_DATE);      
              
 borrow a book
CREATE OR REPLACE PROCEDURE borrow_book(
    p_book_id INT,
    p_borrower_id INT,
    p_loan_date DATE,
    p_due_days INT
)
    LANGUAGE plpgsql
AS $$
DECLARE
    book_available BOOLEAN;
    due_date DATE;
    next_id INT;
BEGIN
    SELECT COALESCE(MAX(loan_id), 0) + 1 INTO next_id FROM loans;

    SELECT NOT EXISTS (
        SELECT 1 FROM loans
        WHERE book_id = p_book_id
          AND returned = FALSE
    ) INTO book_available;

    due_date := p_loan_date + (p_due_days || ' days')::INTERVAL;

    IF book_available THEN
        INSERT INTO loans (loan_id, book_id, borrower_id, loan_date, return_date, returned)
        VALUES (next_id, p_book_id, p_borrower_id, p_loan_date, due_date, FALSE);

        RAISE NOTICE 'Book successfully borrowed. Due date: %', due_date;
    ELSE
        RAISE EXCEPTION 'Book is currently not available for borrowing';
    END IF;
END;
$$;


execute CALL borrow_book(3, 2, CURRENT_DATE, 14);